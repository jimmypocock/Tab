/**
 * Invoice Send Route - Refactored with DI Pattern
 */

import { NextRequest } from 'next/server'
import { withMerchantDI } from '@/lib/api/di-middleware'
import { validateInput } from '@/lib/api/validation'
import { ApiResponseBuilder } from '@/lib/api/response'
import { ValidationError } from '@/lib/errors'
import { parseJsonBody } from '@/lib/api/middleware'
import { z } from 'zod'

const sendInvoiceSchema = z.object({
  recipientEmail: z.string().email(),
  ccEmails: z.array(z.string().email()).optional(),
  subject: z.string().optional(),
  message: z.string().optional(),
})

interface RouteParams {
  params: Promise<{ id: string }>
}

/**
 * POST /api/v1/invoices/[id]/send - Send invoice
 */
export async function POST(request: NextRequest, { params }: RouteParams) {
  const { id } = await params
  
  return withMerchantDI(async (context) => {
    // Parse request body
    const body = await parseJsonBody(context.request)
    if (!body) {
      throw new ValidationError('Request body is required')
    }

    // Validate input
    const validation = validateInput(body, sendInvoiceSchema)
    if (!validation.success) {
      return new ApiResponseBuilder()
        .setStatus(400)
        .setError('Invalid request data', validation.errors)
        .build()
    }

    // Send invoice using service
    await context.invoiceService.sendInvoice(
      id,
      context.organizationId,
      validation.data
    )

    return new ApiResponseBuilder()
      .setData({ message: 'Invoice sent successfully' })
      .build()
  })(request)
}